apply plugin: 'com.android.library'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                targets "fakecreateapp"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Encapsulates your external native build configurations.
    externalNativeBuild {

        // Encapsulates your CMake build configurations.
//        cmake {
//            // Provides a relative path to your CMake build script.
//            path "CMakeLists.txt"
//        }
    }
}

repositories {
    maven {
        url 'https://dl.bintray.com/igagis/android/'
    }
}
dependencies {
    implementation 'io.github.igagis:libutki:+'
    implementation 'io.github.igagis:libpapki:+'
    implementation 'io.github.igagis:libkolme:+'
    implementation 'io.github.igagis:libmorda:+'
}


//===================================
//=== Extract NDK files from AARs ===

// This is needed to be able to write "configurations.implementation.each" below.
configurations.implementation.setCanBeResolved(true)

task extractNDKLibs {
    doLast {
        configurations.implementation.each {
            def file = it.absoluteFile
            copy {
                from zipTree(file)
                into "build/"
                include "ndkLibs/**/*"
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    logger.info('task added')
    if (task.name.startsWith('externalNativeBuild')) {
        task.dependsOn extractNDKLibs
    }
}



//=================================
//=== pack library files to aar ===
//This stuff re-packs the release AAR file adding headers and static libs to there, but removing all shared (.so) libs, as we don't need them. The resulting AAR is put to the project root directory and can be uploaded to Maven along with POM file (you need to write one by hand).

def aarName = name

task copyNdkLibsToAAR(type: Zip) {
    baseName = aarName
    version = "\$(version)"
    extension = 'aar.in'
    destinationDir = file('..') //put resulting AAR file to upper level directory

    from zipTree("build/outputs/aar/" + aarName + "-release.aar")
    exclude('**/*.so') //do not include shared libraries into final AAR
    from("../../src") {
        exclude('makefile')
        exclude('soname.txt')
        exclude('**/*.cpp')
        exclude('**/*.c')
        into('ndkLibs/include')
    }
    from("build/intermediates/cmake/debug/obj"){
        include('**/*.a')
        into('ndkLibs')
    }
}

afterEvaluate {
    bundleReleaseAar.finalizedBy copyNdkLibsToAAR
}





//apply plugin: "com.android.model.library"
//
//def ndkDir = System.getenv("ANDROID_NDK_HOME")
//def propertiesFile = project.rootProject.file('local.properties')
//if (propertiesFile.exists()) {
//    Properties properties = new Properties()
//    properties.load(propertiesFile.newDataInputStream())
//    ndkDir = properties.getProperty('ndk.dir')
//}
//
//def ndkInc = ndkDir + "/sysroot/usr/include"
//
//model {
//    android {
//        compileSdkVersion = 25
//        buildToolsVersion = '25.0.2'
//
//        defaultConfig {
//            minSdkVersion.apiLevel = 21
//            targetSdkVersion.apiLevel = 21
//            versionCode = 1
//            versionName = '1.0'
//        }
//        ndk {
//            platformVersion = 21
//            moduleName = "fakecreateapp"
//            toolchain = 'clang'
//            abiFilters.addAll(['armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64']) //this is default
//            ldLibs.addAll(['android', 'log', 'c++'])
//            stl = 'c++_shared'
//            cppFlags.add("-std=c++11")
//            cppFlags.add("-fexceptions")
//            cppFlags.add("-frtti")
//            cppFlags.add("-fintegrated-as") //needed to avoid assembler error since NDK r15
//            cppFlags.add("-I" + projectDir.getAbsolutePath() + "/build/ndkLibs/include")
//            cppFlags.addAll(["-isystem", ndkInc])
//            cppFlags.add("-D__ANDROID_API__=" + platformVersion)
//            cppFlags.add("-DANDROID_STL=c++_shared")
////            ldFlags.addAll(["-Wl,--allow-shlib-undefined"])
////            ldFlags.add("-Wl,-undefined,warning")
////            ldFlags.remove("-Wl,--no-undefined")
////            project.logger.lifecycle("ldFlags = ${ldFlags}")
//        }
//        abis {
//            create("armeabi-v7a") {
//                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/armeabi-v7a")
//                cppFlags.addAll(["-isystem", ndkInc + "/arm-linux-androideabi"])
//            }
//            create("arm64-v8a") {
//                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/arm64-v8a")
//                cppFlags.addAll(["-isystem", ndkInc + "/aarch64-linux-android"])
//            }
//            create("x86") {
//                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/x86")
//                cppFlags.addAll(["-isystem", ndkInc + "/i686-linux-android"])
//            }
//            create("x86_64") {
//                ldFlags.add("-L" + projectDir.getAbsolutePath() + "/build/ndkLibs/x86_64")
//                cppFlags.addAll(["-isystem", ndkInc + "/x86_64-linux-android"])
//            }
//        }
//        buildTypes {
//            release {
//                ndk {
//                    debuggable true
//                }
//            }
//        }
//    }
//
//    android.lintOptions {
//        abortOnError false
//    }
//
//    android.sources {
//        main {
//            jni {
//                source {
//                    srcDirs 'src/main/cpp'
//                }
//            }
//        }
//    }
//}
//
//repositories {
//    maven {
//        url 'https://dl.bintray.com/igagis/android/'
//    }
//}
//dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar'])
//    compile 'io.github.igagis:libutki:+'
//    compile 'io.github.igagis:libpapki:+'
//    compile 'io.github.igagis:libkolme:+'
//    compile 'io.github.igagis:libmorda:+'
//}
//
//
////===================================
////=== Extract NDK files from AARs ===
//
//task extractNDKLibs {
//    doLast {
//        configurations.compile.each {
//            def file = it.absoluteFile
//            copy {
//                from zipTree(file)
//                into "build/"
//                include "ndkLibs/**/*"
//            }
//        }
//    }
//}
//build.dependsOn('extractNDKLibs')
//tasks.whenTaskAdded { task ->
//    if (task.name.startsWith('compile')) {
//        task.dependsOn('extractNDKLibs')
//    }
//}
//
//
//
////=================================
////=== pack library files to aar ===
//
//
//def aarName = name
//
//task copyNdkLibsToAAR(type: Zip) {
//    baseName = aarName
//    version = "\$(version)"
//    extension = 'aar.in'
//    destinationDir = file('..') //put resulting AAR file to upper level directory
//
//    from zipTree("build/outputs/aar/" + aarName + "-release.aar")
//    exclude('**/*.so') //do not include shared libraries into final AAR
//    from("../../src") {
//        include('**/*.hpp')
//        into('ndkLibs/include')
//    }
//    from("build/intermediates/binaries/debug/lib"){
//        include('**/*.a')
//        into('ndkLibs')
//    }
//}
//
//build.finalizedBy('copyNdkLibsToAAR')
